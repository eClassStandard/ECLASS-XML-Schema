<?xml version="1.0" encoding="UTF-8"?>
<!--
eCl@ssXML 3.0 - XML Schema
Changes in 2.0.1: allow code_to_code and path_to_path in one file (maxOccurs set to 2)
Changes in 2.0.2: re-add element target_path that was lost in
                  map:eclass_mapping/map:path_to_path/map:path_to_path_entry/map:propose_value
Changes in 2.0.3: FIX: the choice in COMPLEXMAPPING_Type should have been optional in order to
                  allow mapping from property of numeric type to property of level numeric type
Changes in 2.0.4: FIX: replaced sequence with optional element code_to_code and optional element prop_to_prop 
				to avoid cases where one of these two elements appears twice
Changes in 3.0.1: added @target_ac / @target_ac attributes to DELETEPATH_Type
-->
<!--

eCl@ssXML 3.0

The following permission notice and disclaimer shall be included in all copies of this DTD/XML Schema ("the Schema"), 
and derivations of the Schema:

Â© eClass e.v. 2012 - All rights reserved

Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema, to use, 
copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, implementing, 
installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
subject to the following conditions:

THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS 
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE USE OR OTHER DEALINGS IN THE SCHEMA.

In addition, any modified copy of the Schema shall include the following notice:

THIS SCHEMA HAS BEEN MODIFIED FROM THE eClassXML 2.0 DICTIONARY SCHEMA, AND SHOULD NOT BE INTERPRETED AS COMPLYING 
WITH THAT SCHEMA



-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:map="urn:eclass:xml-schema:mapping:3.0" xmlns:cmn="urn:eclass:xml-schema:common:3.0" xmlns:hea="urn:eclass:xml-schema:header:3.0" xmlns:id="urn:iso:std:iso:ts:29002:-5:ed-1:tech:xml-schema:identifier" targetNamespace="urn:eclass:xml-schema:mapping:3.0" elementFormDefault="qualified" attributeFormDefault="unqualified" version="3.0">
	<xsd:import namespace="urn:eclass:xml-schema:common:3.0" schemaLocation="./common/common.xsd"/>
	<xsd:import namespace="urn:eclass:xml-schema:header:3.0" schemaLocation="./common/header.xsd"/>
	<xsd:import namespace="urn:iso:std:iso:ts:29002:-5:ed-1:tech:xml-schema:identifier" schemaLocation="../ontoML/ISO29002/identifier.xsd"/>
	<xsd:element name="eclass_mapping" type="map:MAPPING_Type"/>
	<xsd:complexType name="MAPPING_Type">
		<xsd:sequence>
			<xsd:element ref="hea:header"/>
			<xsd:element name="data_references">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="source_release_ref" type="map:RELEASEREF_Type"/>
						<xsd:element name="target_release_ref" type="map:RELEASEREF_Type"/>
						<xsd:element name="designation" type="xsd:string">
							<xsd:annotation>
								<xsd:documentation>indication of what kind of mapping is contained, e.g. "CUF", "TUF", "basadv", ...</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="code_to_code" type="map:CODETOCODE_Type" minOccurs="0"/>
			<xsd:element name="path_to_path" type="map:PATHTOPATH_Type" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="PATHTOPATH_Type">
		<xsd:annotation>
			<xsd:documentation>Applicable for: TUF, Mapping basic advanced, NE100 to eCl@ss</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="path_to_path_entry" minOccurs="0" maxOccurs="unbounded">
				<xsd:complexType>
					<xsd:choice>
						<xsd:element name="equiv_path" type="map:EQUIVPATH_Type"/>
						<xsd:element name="delete_path" type="map:DELETEPATH_Type"/>
						<xsd:element name="propose_value" type="map:PROPOSEVALUE_Type"/>
						<xsd:element name="delete_value" type="map:DELETEVALUE_Type"/>
						<xsd:element name="select_branch" type="map:SELECTBRANCH_Type"/>
					</xsd:choice>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="DELETEVALUE_Type">
		<xsd:sequence>
			<xsd:element name="source_path" type="cmn:PROPERTYPATH_Type"/>
			<xsd:element name="value_to_delete" type="cmn:VALUEREF_Type"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="EQUIVPATH_Type">
		<xsd:sequence>
			<xsd:element name="source_path" type="cmn:PROPERTYPATH_Type" minOccurs="0"/>
			<xsd:element name="target_path" type="cmn:PROPERTYPATH_Type" minOccurs="0"/>
			<xsd:element name="complex_mapping" type="map:COMPLEXMAPPING_Type" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="value_mapping" type="cmn:VALUEMAPPING_Type" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="unit_mapping" type="cmn:UNITMAPPING_Type" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="incompatible_change" type="xsd:boolean" default="false" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Tells if the equivalence lead to an incompatible change</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="direction" type="map:MAPPINGDIRECTION_Type" default="injective">
			<xsd:annotation>
				<xsd:documentation>In case of basic to advanced mapping this would be bijective</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="CONDITIONAL_Type">
		<xsd:annotation>
			<xsd:documentation>Prefix notation for expression of logical combinations without parentheses.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="operator" minOccurs="0">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:pattern value="NOT"/>
						<xsd:pattern value="AND"/>
						<xsd:pattern value="OR"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:choice>
				<xsd:sequence minOccurs="1" maxOccurs="unbounded">
					<xsd:element name="conditional" type="map:CONDITIONAL_Type"/>
				</xsd:sequence>
				<xsd:sequence minOccurs="1" maxOccurs="unbounded">
					<xsd:element name="condition">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="condition_prop_path" type="cmn:PROPERTYPATH_Type"/>
								<xsd:choice>
									<xsd:sequence>
										<xsd:element name="comparator" default="=" minOccurs="0" maxOccurs="1">
											<xsd:simpleType>
												<xsd:restriction base="xsd:string">
													<xsd:pattern value="="/>
													<xsd:pattern value="&lt;"/>
													<xsd:pattern value="&gt;"/>
													<xsd:pattern value="&lt;="/>
													<xsd:pattern value="&gt;="/>
												</xsd:restriction>
											</xsd:simpleType>
										</xsd:element>
										<xsd:element name="condition_value_ref" type="cmn:VALUEREF_Type"/>
									</xsd:sequence>
									<xsd:element name="condition_unit_ref" type="id:IRDI_type"/>
									<xsd:element name="condition_quantity_ref" type="id:IRDI_type"/>
								</xsd:choice>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="COMPLEXMAPPING_Type">
		<xsd:sequence minOccurs="1">
			<xsd:element name="conditional" type="map:CONDITIONAL_Type" minOccurs="0"/>
			<xsd:element name="value_manipulation" type="map:TRANSFORMATIONS_Type" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="VALUETRANSFORMATIONS_Type"/>
	<xsd:complexType name="VALUEGENERATIONS_Type">
		<xsd:choice/>
	</xsd:complexType>
	<xsd:complexType name="VALUEPATH_Type">
		<xsd:sequence>
			<xsd:element name="value_path" type="cmn:PROPERTYPATH_Type"/>
			<xsd:element name="value_qualifier" type="map:LEVELS_Type" minOccurs="0"/>
			<xsd:element name="value_locale" type="cmn:LOCALE_Type" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="TRANSFORMATIONS_Type">
		<xsd:sequence>
			<xsd:choice minOccurs="0">
				<xsd:element name="transform_value">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="source" type="map:VALUEPATH_Type"/>
							<xsd:element name="regular_expression" type="map:REGEX_Type">
								<xsd:annotation>
									<xsd:documentation>Apply a XQuery/XPath fn:replace regular expression on the value of the source to obtain the value of the target. subject is expected from "source"</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="concatenate_value">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="concatenation_string" type="xsd:string" minOccurs="0">
								<xsd:annotation>
									<xsd:documentation>An optional string to be added between the concatenated values</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
							<xsd:element name="print_value" minOccurs="2" maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element name="source" type="map:VALUEPATH_Type"/>
										<xsd:element name="regular_expression" type="map:REGEX_Type" minOccurs="0">
											<xsd:annotation>
												<xsd:documentation>Apply a XQuery/XPath fn:replace regular expression on the value of the source before using the result. See http://www.regular-expressions.info/xpath.html</xsd:documentation>
											</xsd:annotation>
										</xsd:element>
									</xsd:sequence>
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="format_print_value">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="format_string" type="xsd:string">
								<xsd:annotation>
									<xsd:documentation>the format string used to define the value production</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
							<xsd:element name="print_value" maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element name="qualifier" minOccurs="0">
											<xsd:annotation>
												<xsd:documentation>where to take value from and what to take as value</xsd:documentation>
											</xsd:annotation>
											<xsd:complexType>
												<xsd:attribute name="source_element" use="optional" default="property">
													<xsd:simpleType>
														<xsd:restriction base="xsd:string">
															<xsd:pattern value="property"/>
															<xsd:pattern value="unit"/>
														</xsd:restriction>
													</xsd:simpleType>
												</xsd:attribute>
												<xsd:attribute name="source_data" use="optional" default="value">
													<xsd:simpleType>
														<xsd:restriction base="xsd:string">
															<xsd:pattern value="value">
																<xsd:annotation>
																	<xsd:documentation>target application shall take the value (in the optionally specified locale).</xsd:documentation>
																</xsd:annotation>
															</xsd:pattern>
															<xsd:pattern value="attribute">
																<xsd:annotation>
																	<xsd:documentation>target application shall look up a certain attribute in the dictionaryand take the string value of that attribute.</xsd:documentation>
																</xsd:annotation>
															</xsd:pattern>
															<xsd:pattern value="quantified_value">
																<xsd:annotation>
																	<xsd:documentation>target application shall look at the numeric value (concatenacted with unit if applicable) and treat as string.</xsd:documentation>
																</xsd:annotation>
															</xsd:pattern>
														</xsd:restriction>
													</xsd:simpleType>
												</xsd:attribute>
											</xsd:complexType>
										</xsd:element>
										<xsd:element name="source" type="map:VALUEPATH_Type">
											<xsd:annotation>
												<xsd:documentation>property from which the input for the formatting is taken</xsd:documentation>
											</xsd:annotation>
										</xsd:element>
										<xsd:element name="regular_expression" type="map:REGEX_Type" minOccurs="0">
											<xsd:annotation>
												<xsd:documentation>Apply a XQuery/XPath fn:replace regular expression on the value of the source before using the result. </xsd:documentation>
											</xsd:annotation>
										</xsd:element>
									</xsd:sequence>
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="calculate_value" type="map:CALCULATION_Type"/>
				<xsd:element name="set_value" type="map:PROPOSEVALUE_Type"/>
			</xsd:choice>
			<xsd:element name="target" type="map:VALUEPATH_Type" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="REGEX_Type">
		<xsd:sequence>
			<xsd:element name="pattern" type="xsd:string"/>
			<xsd:element name="replacement" type="xsd:string"/>
			<xsd:element name="flags">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:pattern value="i"/>
						<xsd:pattern value="s"/>
						<xsd:pattern value="m"/>
						<xsd:pattern value="x"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
		</xsd:sequence>
		<!--  http://www.regular-expressions.info/xpath.html  // -->
	</xsd:complexType>
	<xsd:simpleType name="LEVELS_Type">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="MIN"/>
			<xsd:pattern value="MAX"/>
			<xsd:pattern value="ABS"/>
			<xsd:pattern value="NORM"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="DELETEPATH_Type">
		<xsd:sequence>
			<xsd:element name="source_path" type="cmn:PROPERTYPATH_Type"/>
		</xsd:sequence>
		<xsd:attribute name="target_cc" type="id:IRDI_type"/>
		<xsd:attribute name="target_ac" type="id:IRDI_type"/>
	</xsd:complexType>
	<xsd:complexType name="PROPOSEVALUE_Type">
		<xsd:sequence>
			<xsd:element name="target_path" type="cmn:PROPERTYPATH_Type"/>
			<xsd:element name="proposed_value" type="cmn:VALUEREF_Type"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="SELECTBRANCH_Type">
		<xsd:sequence>
			<xsd:element name="target_path" type="cmn:PROPERTYPATH_Type"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="CODETOCODE_Type">
		<xsd:annotation>
			<xsd:documentation>Includes move / split / join</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="code_to_code_entry" minOccurs="0" maxOccurs="unbounded">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:choice>
							<xsd:element name="source_code" type="map:code_Type"/>
							<xsd:element name="source_code_set" type="map:code_set_Type"/>
						</xsd:choice>
						<xsd:choice>
							<xsd:element name="target_code" type="map:code_Type"/>
							<xsd:element name="target_code_set" type="map:code_set_Type"/>
						</xsd:choice>
						<xsd:element name="new_code" type="map:code_Type" minOccurs="0">
							<xsd:annotation>
								<xsd:documentation>needed for move. Set types are not applicable for move: 
- source is class to be moved
- target is parent class where source is moved
- new contains code where class is moved to </xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="mapping_type" minOccurs="0">
							<xsd:complexType>
								<xsd:attribute name="type_id" type="id:IRDI_type">
									<xsd:annotation>
										<xsd:documentation>Instead of a type name also an IRDI may be specified for the type.</xsd:documentation>
									</xsd:annotation>
								</xsd:attribute>
								<xsd:attribute name="type_name">
									<xsd:annotation>
										<xsd:documentation>restricted to the same mapping types as in BMEcat 2005.</xsd:documentation>
									</xsd:annotation>
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:enumeration value="accessories">
												<xsd:annotation>
													<xsd:documentation>target_code is an accessory of source_code </xsd:documentation>
												</xsd:annotation>
											</xsd:enumeration>
											<xsd:enumeration value="base_product">
												<xsd:annotation>
													<xsd:documentation>target_code is a base product (i.e. the packaging neutral description) for source_code </xsd:documentation>
												</xsd:annotation>
											</xsd:enumeration>
											<xsd:enumeration value="consists_of">
												<xsd:annotation>
													<xsd:documentation>target_code is a part of of source_code </xsd:documentation>
												</xsd:annotation>
											</xsd:enumeration>
											<xsd:enumeration value="diff_orderunit">
												<xsd:annotation>
													<xsd:documentation>target_code is has a different order unit but shared base product with source_code </xsd:documentation>
												</xsd:annotation>
											</xsd:enumeration>
											<xsd:enumeration value="followup">
												<xsd:annotation>
													<!--<xsd:appinfo>FIXME: 0173-1#RL-AAA005#001</xsd:appinfo>-->
													<xsd:documentation>target_code is a follow up of source_code </xsd:documentation>
												</xsd:annotation>
											</xsd:enumeration>
											<xsd:enumeration value="mandatory">
												<xsd:annotation>
													<xsd:documentation>target_code is required to be ordered when source_code is ordered </xsd:documentation>
												</xsd:annotation>
											</xsd:enumeration>
											<xsd:enumeration value="similar">
												<xsd:annotation>
													<xsd:documentation>target_code is a possible alternative to source_code (weak suggestion, no guarantee)</xsd:documentation>
												</xsd:annotation>
											</xsd:enumeration>
											<xsd:enumeration value="select">
												<xsd:annotation>
													<xsd:documentation>target_code can only be ordered when  source_code is ordered </xsd:documentation>
												</xsd:annotation>
											</xsd:enumeration>
											<xsd:enumeration value="sparepart">
												<xsd:annotation>
													<xsd:documentation>target_code is a spare part for source_code (can be replaced separately) </xsd:documentation>
												</xsd:annotation>
											</xsd:enumeration>
											<xsd:enumeration value="others">
												<xsd:annotation>
													<xsd:documentation>target_code is related to source_code with no clear meaning</xsd:documentation>
												</xsd:annotation>
											</xsd:enumeration>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:attribute>
							</xsd:complexType>
						</xsd:element>
					</xsd:sequence>
					<xsd:attribute name="direction" type="map:MAPPINGDIRECTION_Type" default="bijective">
						<xsd:annotation>
							<xsd:documentation>mapping can be interpreted injective, surjective or bijective?</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="designation">
						<xsd:annotation>
							<xsd:documentation>e.g. "move", "split", "join"</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="remark" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>informative remark on the mapping</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="KVPAIR_Type">
		<xsd:attribute name="key" type="id:IRDI_type"/>
		<xsd:attribute name="value" type="xsd:string"/>
	</xsd:complexType>
	<xsd:simpleType name="MAPPINGDIRECTION_Type">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="injective"/>
			<xsd:enumeration value="bijective"/>
			<xsd:enumeration value="surjective"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="RELEASEREF_Type">
		<xsd:sequence>
			<xsd:element name="irdi_ref" type="id:IRDI_type" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>In case a release has a release Identifier it should be used.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>a human readable name, e.g. "eCl@ss"</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="version_number" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>a human readable version number, e.g. "7.0"</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="code_Type">
		<xsd:attribute name="irdi_ref" type="id:IRDI_type">
			<xsd:annotation>
				<xsd:documentation>ref as IRDI should be given whenever possible, however leaving not required for cases where there is no IRDI</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attributeGroup ref="map:alternate_ref"/>
	</xsd:complexType>
	<xsd:complexType name="code_set_Type">
		<xsd:annotation>
			<xsd:documentation>Mapping code sets on both sides has weak semantics and should be avoided. However this kind of entry may be needed, e.g. for expressing CMAP many-to-many mapping cases.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="code_entry" type="map:code_Type"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:attributeGroup name="alternate_ref">
		<xsd:attribute name="ref_name" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Name of alternative reference, e.g. "hierarchical_position"</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="reference" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Value of alternative reference, e.g. "14010101"</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>
	<xsd:complexType name="CALCULATION_Type">
		<xsd:sequence>
			<xsd:element name="operator" minOccurs="0">
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:pattern value="\+"/>
						<xsd:pattern value="â"/>
						<xsd:pattern value="Ã"/>
						<xsd:pattern value="Ã·"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:element>
			<xsd:choice>
				<xsd:sequence minOccurs="0" maxOccurs="unbounded">
					<xsd:element name="calculation" type="map:CALCULATION_Type"/>
				</xsd:sequence>
				<xsd:sequence maxOccurs="unbounded">
					<xsd:choice>
						<xsd:element name="number" type="cmn:NUMERICVALUE_Type"/>
						<xsd:element name="source" type="map:VALUEPATH_Type"/>
					</xsd:choice>
				</xsd:sequence>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>
</xsd:schema>
